version: '3.8'
services:
  
  nginx-proxy:
    image: nginx:1.26.0-alpine
    container_name: nginx-proxy
    ports:
      - "80:80" # http
      - "443:443" # https
    volumes:
      - ./certs:/etc/nginx/ssl/certs
      - ./private:/etc/nginx/ssl/private
      # - ./.nginx/sites-available:/etc/nginx/sites-available/
      # - ./.nginx/sites-enabled:/etc/nginx/sites-enabled/
      - ./.nginx/conf.g:/etc/nginx/conf.g
    networks:
      - nginx_network

  mysql:
    image: "mysql:8.0"
    container_name: mysql
    ports:
      - "3306:3306"
    networks:
      - db_network
    environment:
      MYSQL_ROOT_PASSWORD:  ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/mysql

  sarre-ui:
    image: ""
    container_name: sarre-ui
    ports:
      - "4200:4200"
    environment:
      PORT: 4200
    networks:
      - nginx_network

  sarre-api:
    image: ""
    container_name: sarre-api
    env_file:
      - .env
    ports:
      - "1997:1997"
    networks:
      - nginx_network
      - db_network
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      USER_PRINCIPAL: ${USER_PRINCIPAL}
      USER_PASSWORD:  ${USER_PASSWORD}
      SERVER_PORT:  1997
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      API_PREFIX: "api/v1/"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME:  ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD:  ${SPRING_DATASOURCE_PASSWORD}
      SARRE_USD_TO_CENT:  ${SARRE_USD_TO_CENT}
      SARRE_NGN_TO_KOBO: ${SARRE_NGN_TO_KOBO}
      PAYSTACK_PUB_KEY: ${PAYSTACK_PUB_KEY}
      PAYSTACK_SECRET_KEY: ${PAYSTACK_SECRET_KEY}
      CORS_UI_DOMAIN: ${CORS_UI_DOMAIN}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_PAYSTACK_SECRET_ID: ${AWS_PAYSTACK_SECRET_ID}

volumes:
  db-data: {}

networks:
  nginx_network: {}
  db_network: {}
